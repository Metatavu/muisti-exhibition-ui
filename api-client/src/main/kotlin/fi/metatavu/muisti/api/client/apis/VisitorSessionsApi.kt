/**
* Muisti API
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.0.0
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package fi.metatavu.muisti.api.client.apis

import fi.metatavu.muisti.api.client.models.Error
import fi.metatavu.muisti.api.client.models.VisitorSession

import fi.metatavu.muisti.api.client.infrastructure.ApiClient
import fi.metatavu.muisti.api.client.infrastructure.ClientException
import fi.metatavu.muisti.api.client.infrastructure.ClientError
import fi.metatavu.muisti.api.client.infrastructure.ServerException
import fi.metatavu.muisti.api.client.infrastructure.ServerError
import fi.metatavu.muisti.api.client.infrastructure.MultiValueMap
import fi.metatavu.muisti.api.client.infrastructure.RequestConfig
import fi.metatavu.muisti.api.client.infrastructure.RequestMethod
import fi.metatavu.muisti.api.client.infrastructure.ResponseType
import fi.metatavu.muisti.api.client.infrastructure.Success
import fi.metatavu.muisti.api.client.infrastructure.toMultiValue

class VisitorSessionsApi(basePath: kotlin.String = "http://localhost") : ApiClient(basePath) {

    /**
    * Create a visitor session
    * Creates new exhibition visitor session
    * @param exhibitionId exhibition id 
    * @param visitorSession Payload 
    * @return VisitorSession
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun createVisitorSession(exhibitionId: java.util.UUID, visitorSession: VisitorSession) : VisitorSession {
        val localVariableBody: kotlin.Any? = visitorSession
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/exhibitions/{exhibitionId}/visitorSessions".replace("{"+"exhibitionId"+"}", "$exhibitionId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val localVarResponse = request<VisitorSession>(
            localVariableConfig,
            localVariableBody
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VisitorSession
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> throw ClientException((localVarResponse as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((localVarResponse as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Deletes visitor session.
    * Delets exhibition visitor session.
    * @param exhibitionId exhibition id 
    * @param visitorSessionId visitor session id 
    * @return void
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun deleteVisitorSession(exhibitionId: java.util.UUID, visitorSessionId: java.util.UUID) : Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/exhibitions/{exhibitionId}/visitorSessions/{visitorSessionId}".replace("{"+"exhibitionId"+"}", "$exhibitionId").replace("{"+"visitorSessionId"+"}", "$visitorSessionId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val localVarResponse = request<Any?>(
            localVariableConfig,
            localVariableBody
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> throw ClientException((localVarResponse as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((localVarResponse as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Find a visitor session
    * Finds a visitor session by id
    * @param exhibitionId exhibition id 
    * @param visitorSessionId visitor session id 
    * @return VisitorSession
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun findVisitorSession(exhibitionId: java.util.UUID, visitorSessionId: java.util.UUID) : VisitorSession {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/exhibitions/{exhibitionId}/visitorSessions/{visitorSessionId}".replace("{"+"exhibitionId"+"}", "$exhibitionId").replace("{"+"visitorSessionId"+"}", "$visitorSessionId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val localVarResponse = request<VisitorSession>(
            localVariableConfig,
            localVariableBody
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VisitorSession
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> throw ClientException((localVarResponse as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((localVarResponse as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * List visitor sessions
    * List exhibition visitor sessions
    * @param exhibitionId exhibition id 
    * @return kotlin.Array<VisitorSession>
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun listVisitorSessions(exhibitionId: java.util.UUID) : kotlin.Array<VisitorSession> {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/exhibitions/{exhibitionId}/visitorSessions".replace("{"+"exhibitionId"+"}", "$exhibitionId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val localVarResponse = request<kotlin.Array<VisitorSession>>(
            localVariableConfig,
            localVariableBody
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.Array<VisitorSession>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> throw ClientException((localVarResponse as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((localVarResponse as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Updates visitor session.
    * Updates visitor session.
    * @param exhibitionId exhibition id 
    * @param visitorSessionId visitor session id 
    * @param visitorSession Payload 
    * @return VisitorSession
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun updateVisitorSession(exhibitionId: java.util.UUID, visitorSessionId: java.util.UUID, visitorSession: VisitorSession) : VisitorSession {
        val localVariableBody: kotlin.Any? = visitorSession
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        val localVariableConfig = RequestConfig(
            RequestMethod.PUT,
            "/exhibitions/{exhibitionId}/visitorSessions/{visitorSessionId}".replace("{"+"exhibitionId"+"}", "$exhibitionId").replace("{"+"visitorSessionId"+"}", "$visitorSessionId"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val localVarResponse = request<VisitorSession>(
            localVariableConfig,
            localVariableBody
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as VisitorSession
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> throw ClientException((localVarResponse as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((localVarResponse as ServerError<*>).message ?: "Server error")
        }
    }

}
