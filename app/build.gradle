apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'kotlin-kapt'

kapt {
    correctErrorTypes true
}

def readFile(fileName) {
    file(fileName).readLines().each() {
        if (!it.isEmpty() && !it.startsWith("#")) {
            def pos = it.indexOf("=")
            def key = it.substring(0, pos)
            def value = it.substring(pos + 1)
            if (System.getProperty(key) == null) {
                System.setProperty(key, value)
            }
        }
    }
}

android {
    compileSdkVersion 30
    buildToolsVersion "29.0.3"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "fi.metatavu.muisti.exhibitionui"
        minSdkVersion 27
        targetSdkVersion 30
        versionCode 104000
        versionName "1.4.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    if (System.getenv('ENV') != null) {
        println("Found ENV")
        if (System.getenv('ENV') == 'test' && file('.env_tests').exists()) {
            readFile('.env_tests')
        }
    } else if (file('.env').exists()) {
        println("Didn't find ENV")
        readFile('.env')
    }

    signingConfigs {

        release {
            storeFile file(SIGN_STORE_FILE)
            storePassword SIGN_STORE_PASSWORD
            keyAlias SIGN_KEY_ALIAS
            keyPassword SIGN_KEY_PASSWORD
            v1SigningEnabled true
            v2SigningEnabled true
        }

    }

    buildTypes {
        release {
            signingConfig signingConfigs.release

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("String", "MUISTI_API_BASE_URL", "\"${System.getProperty('MUISTI_API_BASE_URL')}\"")
            buildConfigField("String", "KEYCLOAK_URL", "\"${System.getProperty('KEYCLOAK_URL')}\"")
            buildConfigField("String", "KEYCLOAK_REALM", "\"${System.getProperty('KEYCLOAK_REALM')}\"")
            buildConfigField("String", "KEYCLOAK_CLIENT_ID", "\"${System.getProperty('KEYCLOAK_CLIENT_ID')}\"")
            buildConfigField("String", "KEYCLOAK_USERNAME", "\"${System.getProperty('KEYCLOAK_USERNAME')}\"")
            buildConfigField("String", "KEYCLOAK_PASSWORD", "\"${System.getProperty('KEYCLOAK_PASSWORD')}\"")
            buildConfigField("Boolean", "DESTRUCTIVE_MIGRATIONS", System.getProperty('DESTRUCTIVE_MIGRATIONS') ?: "false")
            buildConfigField("String", "MQTT_BASE_URL", "\"${System.getProperty('MQTT_BASE_URL')}\"")
            buildConfigField("String", "MQTT_USER", "\"${System.getProperty('MQTT_USER')}\"")
            buildConfigField("String", "MQTT_PASSWORD", "\"${System.getProperty('MQTT_PASSWORD')}\"")
            buildConfigField("String", "MQTT_BASE_TOPIC", "\"${System.getProperty('MQTT_BASE_TOPIC')}\"")
            buildConfigField("String", "KEYCLOAK_DEMO_TAG", "\"${System.getProperty('KEYCLOAK_DEMO_TAG')}\"")
            buildConfigField("String", "MAP_BOX_ACCESS_TOKEN", "\"${System.getProperty('MAP_BOX_ACCESS_TOKEN')}\"")
            buildConfigField("String", "UPDATE_URL", "\"${System.getProperty('UPDATE_URL')}\"")
        }

        debug {
            buildConfigField("String", "MUISTI_API_BASE_URL", "\"${System.getProperty('MUISTI_API_BASE_URL')}\"")
            buildConfigField("String", "KEYCLOAK_URL", "\"${System.getProperty('KEYCLOAK_URL')}\"")
            buildConfigField("String", "KEYCLOAK_REALM", "\"${System.getProperty('KEYCLOAK_REALM')}\"")
            buildConfigField("String", "KEYCLOAK_CLIENT_ID", "\"${System.getProperty('KEYCLOAK_CLIENT_ID')}\"")
            buildConfigField("String", "KEYCLOAK_USERNAME", "\"${System.getProperty('KEYCLOAK_USERNAME')}\"")
            buildConfigField("String", "KEYCLOAK_PASSWORD", "\"${System.getProperty('KEYCLOAK_PASSWORD')}\"")
            buildConfigField("Boolean", "DESTRUCTIVE_MIGRATIONS", System.getProperty('DESTRUCTIVE_MIGRATIONS') ?: "false")
            buildConfigField("String", "MQTT_BASE_URL", "\"${System.getProperty('MQTT_BASE_URL')}\"")
            buildConfigField("String", "MQTT_USER", "\"${System.getProperty('MQTT_USER')}\"")
            buildConfigField("String", "MQTT_PASSWORD", "\"${System.getProperty('MQTT_PASSWORD')}\"")
            buildConfigField("String", "MQTT_BASE_TOPIC", "\"${System.getProperty('MQTT_BASE_TOPIC')}\"")
            buildConfigField("String", "KEYCLOAK_DEMO_TAG", "\"${System.getProperty('KEYCLOAK_DEMO_TAG')}\"")
            buildConfigField("String", "MAP_BOX_ACCESS_TOKEN", "\"${System.getProperty('MAP_BOX_ACCESS_TOKEN')}\"")
            buildConfigField("String", "UPDATE_URL", "\"${System.getProperty('UPDATE_URL')}\"")
        }
    }
    lintOptions {
        disable('AllowBackup', 'GoogleAppIndexingWarning', 'MissingApplicationIcon')
    }
}

repositories {
    maven {
        url "https://repo.eclipse.org/content/repositories/paho-snapshots/"
    }
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.preference:preference:1.1.0'
    implementation project(':api-client')
    implementation "com.squareup.okhttp3:okhttp:4.9.3"
    implementation "io.github.cdimascio:java-dotenv:5.1.3"

    // Moshi

    implementation "com.squareup.moshi:moshi-kotlin:1.8.0"
    implementation "com.squareup.moshi:moshi-adapters:1.8.0"

    // Exo player

    implementation "com.google.android.exoplayer:exoplayer:$rootProject.exoplayerVersion"
    implementation 'rongi.rotate-layout:rotate-layout:3.0.0'

    // Room components

    implementation "androidx.room:room-runtime:$rootProject.roomVersion"
    implementation "androidx.room:room-ktx:$rootProject.roomVersion"
    kapt "androidx.room:room-compiler:$rootProject.roomVersion"

    // Lifecycle components

    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.archLifecycleVersion"
    kapt "androidx.lifecycle:lifecycle-compiler:$rootProject.archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$rootProject.archLifecycleVersion"

    // ViewModel Kotlin support

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.archLifecycleVersion"

    // UI

    implementation "com.google.android.material:material:$rootProject.materialVersion"

    // JWT decode

    implementation 'com.auth0.android:jwtdecode:1.4.0'

    // Text flow view

    implementation 'com.github.deano2390:FlowTextView:2.0.5'

    // MQTT

    implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.0.2'

    // FlowTextView

    implementation 'com.github.deano2390:FlowTextView:2.0.5'

    // Rhino

    implementation 'org.mozilla:rhino:1.7.12'

    // MapBox

    implementation 'com.mapbox.mapboxsdk:mapbox-android-sdk:9.2.0'

    // Apache IOUtils

    implementation "org.apache.commons:commons-io:1.3.2"

    // Android test

    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // Test

    testImplementation 'junit:junit:4.12'
    testImplementation "fi.metatavu.jaxrs.testbuilder:jaxrs-functional-test-builder:$jaxrs_functional_test_builder_version"
    testImplementation 'io.appium:java-client:3.3.0'
    testImplementation project(':api-test-builder')

    // Kapt

    compileOnly 'com.github.pengrad:jdk9-deps:1.0'
}


